// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package vermouth

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VermouthGrpcClient is the client API for VermouthGrpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VermouthGrpcClient interface {
	RegisterToProxy(ctx context.Context, in *RegisterToProxyReq, opts ...grpc.CallOption) (*Res, error)
	Cancel(ctx context.Context, in *CancalReq, opts ...grpc.CallOption) (*Res, error)
	JoinCluster(ctx context.Context, in *JoinClusterReq, opts ...grpc.CallOption) (*Res, error)
}

type vermouthGrpcClient struct {
	cc grpc.ClientConnInterface
}

func NewVermouthGrpcClient(cc grpc.ClientConnInterface) VermouthGrpcClient {
	return &vermouthGrpcClient{cc}
}

func (c *vermouthGrpcClient) RegisterToProxy(ctx context.Context, in *RegisterToProxyReq, opts ...grpc.CallOption) (*Res, error) {
	out := new(Res)
	err := c.cc.Invoke(ctx, "/vermouth_grpc.VermouthGrpc/RegisterToProxy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vermouthGrpcClient) Cancel(ctx context.Context, in *CancalReq, opts ...grpc.CallOption) (*Res, error) {
	out := new(Res)
	err := c.cc.Invoke(ctx, "/vermouth_grpc.VermouthGrpc/Cancel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vermouthGrpcClient) JoinCluster(ctx context.Context, in *JoinClusterReq, opts ...grpc.CallOption) (*Res, error) {
	out := new(Res)
	err := c.cc.Invoke(ctx, "/vermouth_grpc.VermouthGrpc/JoinCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VermouthGrpcServer is the server API for VermouthGrpc service.
// All implementations must embed UnimplementedVermouthGrpcServer
// for forward compatibility
type VermouthGrpcServer interface {
	RegisterToProxy(context.Context, *RegisterToProxyReq) (*Res, error)
	Cancel(context.Context, *CancalReq) (*Res, error)
	JoinCluster(context.Context, *JoinClusterReq) (*Res, error)
	mustEmbedUnimplementedVermouthGrpcServer()
}

// UnimplementedVermouthGrpcServer must be embedded to have forward compatible implementations.
type UnimplementedVermouthGrpcServer struct {
}

func (UnimplementedVermouthGrpcServer) RegisterToProxy(context.Context, *RegisterToProxyReq) (*Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterToProxy not implemented")
}
func (UnimplementedVermouthGrpcServer) Cancel(context.Context, *CancalReq) (*Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cancel not implemented")
}
func (UnimplementedVermouthGrpcServer) JoinCluster(context.Context, *JoinClusterReq) (*Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinCluster not implemented")
}
func (UnimplementedVermouthGrpcServer) mustEmbedUnimplementedVermouthGrpcServer() {}

// UnsafeVermouthGrpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VermouthGrpcServer will
// result in compilation errors.
type UnsafeVermouthGrpcServer interface {
	mustEmbedUnimplementedVermouthGrpcServer()
}

func RegisterVermouthGrpcServer(s grpc.ServiceRegistrar, srv VermouthGrpcServer) {
	s.RegisterService(&VermouthGrpc_ServiceDesc, srv)
}

func _VermouthGrpc_RegisterToProxy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterToProxyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VermouthGrpcServer).RegisterToProxy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vermouth_grpc.VermouthGrpc/RegisterToProxy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VermouthGrpcServer).RegisterToProxy(ctx, req.(*RegisterToProxyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VermouthGrpc_Cancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancalReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VermouthGrpcServer).Cancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vermouth_grpc.VermouthGrpc/Cancel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VermouthGrpcServer).Cancel(ctx, req.(*CancalReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VermouthGrpc_JoinCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinClusterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VermouthGrpcServer).JoinCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vermouth_grpc.VermouthGrpc/JoinCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VermouthGrpcServer).JoinCluster(ctx, req.(*JoinClusterReq))
	}
	return interceptor(ctx, in, info, handler)
}

// VermouthGrpc_ServiceDesc is the grpc.ServiceDesc for VermouthGrpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VermouthGrpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "vermouth_grpc.VermouthGrpc",
	HandlerType: (*VermouthGrpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterToProxy",
			Handler:    _VermouthGrpc_RegisterToProxy_Handler,
		},
		{
			MethodName: "Cancel",
			Handler:    _VermouthGrpc_Cancel_Handler,
		},
		{
			MethodName: "JoinCluster",
			Handler:    _VermouthGrpc_JoinCluster_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vermouth_rpc_service.proto",
}
